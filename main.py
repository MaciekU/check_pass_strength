# Program checking password strength generated by users 
import pandas as pd
import numpy as np
import re
# import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import HashingVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.externals import joblib


def read_data(data_path='rockyou.txt'):
    data = pd.read_csv(data_path, header=None, index_col=None,
                       sep='\n', quoting=3, encoding='latin-1')

    len_data_before = len(data)
    data.drop_duplicates(keep='first', inplace=True)
    print(f"The following number of duplicates were rejected: {len_data_before - len(data)}")

    data = data.astype(str)
    data.columns = ['password']

    return data


# Adding some features to manually check passwords
def preprocess_data(data):
    data['length'] = data['password'].apply(len)
    data.drop(data[data['length'] > 25].index, inplace=True)  # too long passwords

    check_for_AZ = lambda x: len(re.findall(r'[A-Z]', x))
    data['upper'] = data['password'].apply(check_for_AZ)
    # check_for_az = lambda x: len(re.findall(r'[a-z]', x))
    # data['lower'] = data['password'].apply(check_for_az)
    # TODO: add more features using re
    check_for_special = lambda x: len(re.findall(r'[!@#$%^&*(),.?":{}|<>]', x))
    data['special'] = data['password'].apply(check_for_special)
    # FIXME: for loop, need too much computation power
    bad_pass_list = ['123', '456', '789', 'admin', 'user']
    check_for_bad_pass = lambda x: any([_ in x for _ in bad_pass_list])
    data['bad_pass'] = data['password'].apply(check_for_bad_pass)

    return data


def filter_bad_passwords(data):
    data = data[(data['length'] <= 8) &
                (data['upper'] < 2) & (data['special'] < 2) &
                (data['bad_pass'] == True)]

    return data


def describe_data(data):
    print(data.head(20))
    print(data.describe())
    # print(data[data['length'] < 8].head())
    # print(data[data['length'] == 285].head())
    print(data['bad_pass'].value_counts(normalize=True))

    # data['length'].hist()
    # plt.show()


# RAM WARNING
def simple_password_check():
    data = preprocess_data(read_data())
    describe_data(data)


# RAM WARNING
def automated_password_check():
    data = read_data()

    count_vec_one = CountVectorizer(ngram_range=(1, 1), analyzer='char', lowercase=False)
    one_char = count_vec_one.fit_transform(data['password'])
    print(f"Combinations of 1 char words: {len(count_vec_one.vocabulary_)}")

    sum_chars = np.sum(one_char, axis=0)
    print_info = np.array(count_vec_one.get_feature_names())[np.argsort(sum_chars)[:, -30:]]
    print(f"Most used 1 char: {print_info}")

    count_vec_three = CountVectorizer(ngram_range=(1, 3), analyzer='char', lowercase=False)
    three_char = count_vec_three.fit_transform(data['password'])
    print(f"Combinations of 1-3 char words: {len(count_vec_three.vocabulary_)}")

    sum_chars = np.sum(three_char, axis=0)
    print_info = np.array(count_vec_three.get_feature_names())[np.argsort(sum_chars)[:, -30:]]
    print(f"Most used 1-3 char: {print_info}")

    count_vec_eight = CountVectorizer(ngram_range=(4, 8), analyzer='char', lowercase=False)
    eight_char = count_vec_eight.fit_transform(data['password'])
    print(f"Combinations of 4-8 char words: {len(count_vec_eight.vocabulary_)}")

    sum_chars = np.sum(eight_char, axis=0)
    print_info = np.array(count_vec_eight.get_feature_names())[np.argsort(sum_chars)[:, -30:]]
    print(f"Most used 4-8 char: {print_info}")


def batch(iterable, step=1):
    l = len(iterable)
    for idx in range(0, l, step):
        yield iterable[idx: min(idx + step, l)]


def automated_password_check_test():
    data = read_data()

    count_vec_three = CountVectorizer(ngram_range=(1, 3), analyzer='char', lowercase=False)
    three_char = count_vec_three.fit_transform(data['password'])
    print(f"Combinations of 1-3 char words: {len(count_vec_three.vocabulary_)}")

    print("Test similar passwords:")
    print(cosine_similarity(count_vec_three.transform(["admin123"]), count_vec_three.transform(["123admin321"])))
    print("Test different passwords:")
    print(cosine_similarity(count_vec_three.transform(["uewhfwue"]), count_vec_three.transform(["admin123"])))

    hvect_three = HashingVectorizer(ngram_range=(1, 3), analyzer='char', lowercase=False)

    for passwords in batch(data['password'], 1000000):
        three_char = hvect_three.fit_transform(passwords)

    print("Test similar passwords:")
    print(cosine_similarity(hvect_three.transform(["admin123"]), hvect_three.transform(["123admin321"])))
    print("Test different passwords:")
    print(cosine_similarity(hvect_three.transform(["uewhfwue"]), hvect_three.transform(["admin123"])))


class GraphicTerm:
    VBAD = '\033[1m\033[31m\033[43m'
    BAD = '\033[1m\033[91m'
    AVERAGE = '\033[1m\033[93m'
    GOOD = '\033[1m\033[32m'
    VERY_GOOD = '\033[1m\033[92m'
    PERFECT = '\033[1m\033[94m'

    END = '\033[0m'



class TestUserPassword:
    def __init__(self, ngram_range=(1, 3)):
        self.ngram_range = ngram_range
        self.data = None
        self.matrix = None
        self.vectorizer = HashingVectorizer(ngram_range=self.ngram_range, analyzer='char', lowercase=False)

    def load_new_data(self, data_path='rockyou.txt'):
        self.data = read_data(data_path)

    def train_matrix(self):
        for passwords in batch(self.data, 1000000):
            self.matrix = self.vectorizer.fit_transform(passwords)

    def dump_model(self):
        joblib.dump(self.matrix, 'matrix.joblib')

    def load_model(self):
        self.matrix = joblib.load('matrix.joblib')

    # def get_score_old(self, password):
    #     score = cosine_similarity(self.vectorizer.transform([password]), self.matrix)
    #     return score.mean()

    def get_score(self, password):
        score = cosine_similarity(self.vectorizer.transform([password]), self.matrix)
        return score[:, np.argsort(score)[0, -15:]].mean()

    def print_score(self, user_password):
        score = self.get_score(user_password)
        if score > 0.8:
            print(f"{user_password} {GraphicTerm.VBAD}VERY BAD{GraphicTerm.END} {score}")
        elif score > 0.6:
            print(f"{user_password} {GraphicTerm.BAD}BAD{GraphicTerm.END} {score}")
        elif score > 0.5:
            print(f"{user_password} {GraphicTerm.AVERAGE}AVERAGE{GraphicTerm.END} {score}")
        elif score > 0.4:
            print(f"{user_password} {GraphicTerm.GOOD}GOOD{GraphicTerm.END} {score}")
        elif score > 0.3:
            print(f"{user_password} {GraphicTerm.VERY_GOOD}VERY GOOD{GraphicTerm.END} {score}")
        else:
            print(f"{user_password} {GraphicTerm.PERFECT}PERFECT{GraphicTerm.END} {score}")


if __name__ == "__main__":
    o = TestUserPassword(ngram_range=(1, 3))

    # o.load_new_data()
    # o.train_matrix()
    # o.dump_model()
    o.load_model()

    o.print_score("password123321")
    o.print_score("123123")
    o.print_score("A8g(*(93ga121REF@ta!")

